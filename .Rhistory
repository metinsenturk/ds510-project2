lower.tail = F))
anova(lgm_model, test = "Chisq")
summary(anova(lgm_model, test = "Chisq"))
anova(lgm_model, test = "Chisq")
# goodness-of-fit test
with(lgm_model,
pchisq(null.deviance - deviance,
df.null - df.residual,
lower.tail = F))
anova(lgm_model, test = "Chisq")
anova(lgm_model, type="II", test="Wald")
# goodness-of-fit test
with(lgm_model,
pchisq(null.deviance - deviance,
df.null - df.residual,
lower.tail = F))
anova(lgm_model, test="Chisq")
anova(lgm_model, update(lgm_model, ~ 1), test="Chisq")
anova(lgm_model, update(lgm_model, ~ 0), test="Chisq")
anova(lgm_model, update(lgm_model, ~ 6), test="Chisq")
anova(lgm_model, update(lgm_model, ~ 2), test="Chisq")
anova(lgm_model, update(lgm_model, ~ 1), test="Chisq")
anova(lgm_model, update(lgm_model, ~ 0), test="Chisq")
# plots for roc, accuracy and prob dist hist
probs <- predict(lgm_model, data_train, type = "response")
rocplot(probs, data_train$AHD)
# packages
pkgs <- c("dplyr", "popbio", "e1071", "caret")
invisible(package.check(pkgs))
rocplot(probs, data_train$AHD)
source("Scripts/model_functions.R")
source("Scripts/model_functions.R")
invisible(package.check(pkgs))
rocplot(probs, data_train$AHD)
# accuracy and cutoff value
cutoff_acc(probs, data_train$AHD)
confmatrix(probs, data_train$AHD, db)
# k-fold control
ctrl <- trainControl(method = "repeatedcv",
number = 10, repeats = 10,
savePredictions = TRUE)
# k-fold training
mod_fit <- train(AHD ~ MaxHR + Oldpeak + Chol, data=training,
method="glm", family="binomial",
trControl = ctrl,
tuneLength = 10)
# k-fold training
mod_fit <- train(AHD ~ MaxHR + Oldpeak + Chol, data=training,
method="glm", family="binomial",
trControl = ctrl,
tuneLength = 10)
summary(mod_fit)
summary(mod_fit)
mod_fit
summary(mod_fit)
mod_fit
confusionMatrix(data = pred, training$AHD)
# confusion matrix results for training data
pred <- predict(mod_fit, newdata=training)
confusionMatrix(data = pred, training$AHD)
mod_fit
# confusion matrix for test data
probs = predict(lgm_model, data_test, type = "response")
confmatrix(probs, data_test$AHD, db)
# k-fold validation for test data
pred <- predict(mod_fit, newdata=testing)
confusionMatrix(data = pred, testing$AHD)
confusionMatrix(data = pred, testing$AHD)
get.seed()
all.equal(get.seed())
all.equal(get.seed(), .Random.seed, check.attributes = FALSE)
exists(".Random.seed")
.Random.seed
# a brief summary of the best model
summary(svm_model)
svm_tune <- tune(svm, AHD ~ Chol + MaxHR + Oldpeak, data = data_train,
type = "C-classification",
kernel = "radial",
decision.values = T,
scale = F,
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# first five performances
head(svm_tune$performances)
# getting the best model
svm_model <- svm_tune$best.model
# a brief summary of the best model
summary(svm_model)
# confusion matrix for svm on train data
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
# getting the best model
svm_model <- svm_tune$best.model
# a brief summary of the best model
summary(svm_model)
# getting the best model
svm_model <- svm_tune$best.model
confmatrix(preds, data_train$AHD)
confmatrix(preds, data_test$AHD)
# confusion matrix for svm on test data
preds <- predict(svm_model, data_test)
confmatrix(preds, data_test$AHD)
# roc curve graphs for svm on test data
preds2 <- predict(svm_model, data_test, decision.values = T)
attrs2 <- attributes(preds2)$decision.values
rocplot(attrs2, data_test$AHD)
# comparing rocs
rocplot_compare(attrs1, attrs2, data_train$AHD, data_test$AHD)
# roc curve graphs for svm on train data
preds1 <- predict(svm_model, data_train, decision.values = T)
attrs1 <- attributes(preds1)$decision.values
# comparing rocs
rocplot_compare(attrs1, attrs2, data_train$AHD, data_test$AHD)
set.seed(1000)
# importing dataset ====
# for simplicity, we will check env if the variables we need are loaded. Otherwise, load first.
vars = c("data_raw", "data_train", "data_test", "f_0")
if (!exists(vars)) {
stop("Variables in environment are missing.")
} else {
str(data_train)
}
# datasets updated with only cont type variables
data_train <- data_train[, c(2, 5, 6, 9, 11, 15)]
data_test <- data_test[, c(2, 5, 6, 9, 11, 15)]
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
summary(svm_model)
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
svm_tune$best.parameters
head(svm_tune$performances)
svm_model <- svm_tune$best.model
# plotting variables individually
plot(data_train$Age, y = data_train$AHD, col = 2)
par(new=T)
# plotting variables individually
plot(data_train$Age, y = data_train$AHD, col = 2)
par(new=T)
plot(data_train[,2], svm_model$fitted, col = 3)
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
set.seed(234)
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
summary(svm_model)
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
set.seed(2134)
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
set.seed(342)
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
# conf matrix
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
# applying model to test data
# roc for test
preds <- predict(svm_model, data_test, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_test$AHD)
set.seed(1)
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
summary(svm_model)
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
svm_tune$best.parameters
head(svm_tune$performances)
svm_model <- svm_tune$best.model
# plotting variables individually
plot(data_train$Age, y = data_train$AHD, col = 2)
par(new=T)
plot(data_train[,2], svm_model$fitted, col = 3)
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 10)
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 5)
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
10^-2
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 5),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
svm_tune$best.parameters
head(svm_tune$performances)
svm_model <- svm_tune$best.model
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 10),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
# datasets updated with only cont type variables
data_train <- data_raw[, c(2, 5, 6, 9, 11, 15)]
data_test <- data_raw[, c(2, 5, 6, 9, 11, 15)]
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 10),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
svm_tune$best.parameters
head(svm_tune$performances)
svm_model <- svm_tune$best.model
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
svm_tune$best.parameters
set.seed(100)
# datasets updated with only cont type variables
data_train <- data_raw[, c(2, 5, 6, 9, 11, 15)]
data_test <- data_raw[, c(2, 5, 6, 9, 11, 15)]
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
summary(svm_model)
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 10),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
svm_tune$best.parameters
head(svm_tune$performances)
svm_model <- svm_tune$best.model
# plotting variables individually
plot(data_train$Age, y = data_train$AHD, col = 2)
par(new=T)
plot(data_train[,2], svm_model$fitted, col = 3)
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
# conf matrix
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
set.seed(120)
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
summary(svm_model)
# conf matrix
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
set.seed(1200)
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
summary(svm_model)
# conf matrix
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
# tuning
svm_tune <- tune(svm, f_1, data = data_train,
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 10),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# conf matrix
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
set.seed(546)
# svm model ====
# model
svm_model <- svm(f_1, data = data_train,
kernel = "radial",
gamma = 1,
cost = 0.5,
decision.values=T,
scale = F,
type = "C-classification")
summary(svm_model)
# conf matrix
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
# tuning
svm_tune <- tune(svm, f_1, data = data_raw[, c(2, 5, 6, 9, 11, 15)],
kernel = "radial",
type = "C-classification",
decision.values=T,
scale = F,
tunecontrol = tune.control(cross = 10),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
svm_tune$best.parameters
head(svm_tune$performances)
svm_model <- svm_tune$best.model
# plotting variables individually
plot(data_train$Age, y = data_train$AHD, col = 2)
par(new=T)
plot(data_train[,2], svm_model$fitted, col = 3)
# roc
preds <- predict(svm_model, data_train, decision.values = T)
attrs <- attributes(preds)$decision.values
rocplot(attrs, data_train$AHD)
# conf matrix
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
svm_tune$sampling
knitr::opts_chunk$set(echo = T, tidy = T)
# “default”, “cerulean”, “journal”, “flatly”, “readable”, “spacelab”, “united”, “cosmo”, “lumen”, “paper”, “sandstone”, “simplex”, “yeti”
svm_tune <- tune(svm, AHD ~ Chol + MaxHR + Oldpeak, data = data_train,
type = "C-classification",
kernel = "radial",
decision.values = T,
scale = F,
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
svm_tune$sampling
!exists("svm_tune")
# finding best model with svm tune
if (!exists("svm_tune"))
if (!exists("svm_tune")){
svm_tune <- tune(svm, AHD ~ Chol + MaxHR + Oldpeak, data = data_train,
type = "C-classification",
kernel = "radial",
decision.values = T,
scale = F,
tunecontrol = tune.control(cross = 10),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
} else {
print("aa")
}
# train and test datasets
data_raw = data_raw[, c(2, 5, 6, 9, 11, 15)]
data_raw
# finding best model with svm tune
svm_tune <- tune(svm, AHD ~ Chol + MaxHR + Oldpeak, data = data_raw,
type = "C-classification",
kernel = "radial",
decision.values = T,
scale = F,
tunecontrol = tune.control(cross = 10),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# getting the best model
svm_model <- svm_tune$best.model
# a brief summary of the best model
summary(svm_model)
# confusion matrix for svm on train data
preds <- predict(svm_model, data_train)
confmatrix(preds, data_train$AHD)
# roc curve graphs for svm on train data
preds1 <- predict(svm_model, data_train, decision.values = T)
attrs1 <- attributes(preds1)$decision.values
rocplot(attrs1, data_train$AHD)
# confusion matrix for svm on train data
preds <- predict(svm_model, data_raw)
confmatrix(preds, data_train$AHD)
# roc curve graphs for svm on train data
preds1 <- predict(svm_model, data_raw, decision.values = T)
attrs1 <- attributes(preds1)$decision.values
rocplot(attrs1, data_train$AHD)
# confusion matrix for svm on test data
preds <- predict(svm_model, data_raw)
confmatrix(preds, data_test$AHD)
# plots for roc, accuracy and prob dist hist
probs_lgm <- predict(lgm_model, data_train, type = "response")
rocplot(probs_lgm, data_train$AHD)
# roc curve graphs for svm on train data
preds_svm <- predict(svm_model, data_raw, decision.values = T)
attrs_svm <- attributes(preds_svm)$decision.values
rocplot(attrs_svm, data_train$AHD)
# comparing rocs
rocplot_compare(probs_lgm, attrs_svm, data_train$AHD, data_raw$AHD)
# comparing rocs
rocplot_compare(probs_lgm, attrs_svm, data_test$AHD, data_raw$AHD)
# comparing rocs
rocplot_compare(probs_lgm, attrs_svm, data_test$AHD, data_train$AHD)
# comparing rocs
rocplot_compare(probs_lgm, attrs_svm, data_train$AHD, data_raw$AHD)
confmatrix(preds, data_raw$AHD)
# roc curve graphs for svm on train data
preds_svm <- predict(svm_model, data_raw, decision.values = T)
attrs_svm <- attributes(preds_svm)$decision.values
rocplot(attrs_svm, data_raw$AHD)
# finding best model with svm tune
svm_tune <- tune(svm, AHD ~ Chol + MaxHR + Oldpeak, data = data_raw,
type = "One-classification",
kernel = "radial",
decision.values = T,
scale = F,
tunecontrol = tune.control(cross = 10, nrepeat = 5),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# finding best model with svm tune
svm_tune <- tune(svm, AHD ~ Chol + MaxHR + Oldpeak, data = data_raw,
type = "one-classification",
kernel = "radial",
decision.values = T,
scale = F,
tunecontrol = tune.control(cross = 10, nrepeat = 5),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# finding best model with svm tune
svm_tune <- tune(svm, AHD ~ Chol + MaxHR + Oldpeak, data = data_raw,
type = "C-classification",
kernel = "radial",
decision.values = T,
scale = F,
tunecontrol = tune.control(cross = 10, nrepeat = 5),
ranges = list(gamma = 2^(-1:2), cost = 2^(-1:10)))
# getting the best model
svm_model <- svm_tune$best.model
# a brief summary of the best model
summary(svm_model)
# roc curve graphs for svm on train data
preds_svm <- predict(svm_model, data_raw, decision.values = T)
attrs_svm <- attributes(preds_svm)$decision.values
rocplot(attrs_svm, data_raw$AHD)
