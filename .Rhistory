#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "y",
las = 2,
boxwex = 0.3)$out
x <- auto_train$acceleration
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "y",
las = 2,
boxwex = 0.3)$out
# normalization
data_raw %>%
select(-one_of(c("X"))) %>%
select_if(is.numeric)  %>%
head
# continuous variables
cont_list = list(
Age = data_raw$Age,
RestBP = data_raw$RestBP,
Chol = data_raw$Chol,
MaxHR = data_raw$MaxHR,
Oldpeak = data_raw$Oldpeak
)
# examining and changing variables
head(sapply(cont_list, scale))
data_raw[, names(cont_list)] <- data.frame(sapply(cont_list, scale))
head(data_raw)
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "y",
las = 2,
boxwex = 0.3)$out
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "n",
las = 2,
boxwex = 0.3)$out
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)$out
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "y",
las = 2,
boxwex = 0.3)$out
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)$out
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)$out
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
typeof(auto_train$acceleration)
typeof(data_raw$acceleration)
typeof(data_raw$Age)
View(data_raw)
vector(1,23,4)
vector(length = 4)
head(data_raw$Age)
source("Scripts/glm_functions.R")
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
data_raw$RestBP = outlier_handler(data_raw$RestBP)
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
data_raw$RestBP = outlier_handler(data_raw$RestBP)
data_raw$Chol = outlier_handler(data_raw$Chol)
data_raw$Oldpeak = outlier_handler(data_raw$Oldpeak)
#dealing with outliers
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
# normalization
data_raw %>%
select(-one_of(c("X"))) %>%
select_if(is.numeric)  %>%
head
# continuous variables
cont_list = list(
Age = data_raw$Age,
RestBP = data_raw$RestBP,
Chol = data_raw$Chol,
MaxHR = data_raw$MaxHR,
Oldpeak = data_raw$Oldpeak
)
# examining and changing variables
head(sapply(cont_list, scale))
# outlier analysis and removal
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
# outlier analysis and removal
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
# outlier analysis and removal
boxplot(data_raw[,c(2, 5, 6, 9, 11)],
log = "x",
las = 2,
boxwex = 0.3)
data_raw$RestBP = outlier_handler(data_raw$RestBP)
data_raw$Chol = outlier_handler(data_raw$Chol)
data_raw$Oldpeak = outlier_handler(data_raw$Oldpeak)
1:300
data_raw[250:.]
data_raw[250:,]
data_raw[:.,]
data_raw[250:303,]
View(data_raw)
data_raw[251:303, ]
str(knitr::opts_chunk$get())
# correlation of cont variables
cor(data.frame(cont_list))
cor(data_raw$AHD, data.frame(cont_list))
# all cont type variables
pairs(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
diag.panel = panel.hist,
lower.panel = panel.cor)
# train and test datasets
data_train = data_raw[ 1:250, ]
data_test = data_raw[251:303, ]
# all cont type variables
pairs(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
diag.panel = panel.hist,
lower.panel = panel.cor)
# all cont type variables
pairs(~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
diag.panel = panel.hist,
lower.panel = panel.cor)
# all cont type variables
pairs(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
diag.panel = panel.hist,
lower.panel = panel.cor)
table(data_train)
table(data_train$AHD)
table(c(0, 250), data_train$AHD)
# assigning 0 and 1 to predictor
data_raw$AHD = ifelse(data_raw$AHD == "Yes", 1, 0)
# train and test datasets
data_train = data_raw[ 1:250, ]
data_test = data_raw[251:303, ]
# assuming all having the disease
table(c(rep(0, 250), rep(1, 250)), data_train$AHD)
data_train$AHD
# assuming all having the disease
table(rep(1, 250), data_train$AHD)
rep(1, 250)
# assuming all having the disease
t = table(rep(1, 250), data_train$AHD)
# chances
table(data.frame(all_diseased = t[1,2] / sum(t),
none_diseased = t[1,1] / sum(t)))
# chances
data.frame(all_diseased = t[1,2] / sum(t),
none_diseased = t[1,1] / sum(t))
# chances
data.frame(all_diseased = t[1,2] / sum(t),
none_diseased = t[1,1] / sum(t))
# train and test datasets
data_train = data_raw[ 1:250, ]
data_test = data_raw[251:303, ]
# assuming all having the disease
t = table(rep(1, 250), data_train$AHD)
# chances
data.frame(all_diseased = t[1,2] / sum(t),
none_diseased = t[1,1] / sum(t))
# model with all variables
f_0 <- AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak
# other possible models
f_1 <- AHD ~ MaxHR + Oldpeak + RestBP
f_2 <- AHD ~ RestBP + Chol + MaxHR + Oldpeak
# logistic regression model
lgm_model = glm(f_1, data = data_train, family = binomial)
summary(lgm_model)
# Anova
anova(lgm_model)
lgm_model = glm(f_0, data = data_train, family = binomial)
summary(lgm_model)
# Anova
anova(lgm_model)
# stepAIC
steps <- stepAIC(lgm_model, trace = T)
steps <- step(lgm_model)
summary(steps)
# leaps
regsubs <- regsubsets(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
nbest = 1,
method = "exhaustive")
library(boot)
cv_model <- cv.glm(data_train, lgm_model)
cv_model$delta
cv_model <- cv.glm(data_train, lgm_model, K = 10)
cv_model$delta
flds <- createFolds(data_train, k = 200, list = TRUE, returnTrain = FALSE)
flds
#kfold
trcontrol <- trainControl(method = "cv", number = 10)
trcontrol
train(f.all, data_train, method = 'glm', family = binomial, trcontrol = trcontrol)
# packages
pkgs <- c("dplyr", "popbio")
package.check(pkgs)
# evaluation of model according to cutoff value ====
probs <- predict(lgm_model, data_train, type = "response")
#another graph
logi.hist.plot(probs, data_train$AHD, boxp = F, type = "count", col = "gray", xlabel = "Age")
logi.hist.plot(probs,
data_train$AHD,
boxp = T,
type = "count",
col = "gray",
xlabel = "Age")
logi.hist.plot(probs,
data_train$AHD,
boxp = F,
type = "count",
col = "gray",
xlabel = "Age")
# evaluation of model according to cutoff value ====
probs <- predict(lgm_model, data_train, type = "response")
head(probs)
hist(probs)
lines(density(probs))
hist(probs, prob =T)
hist(probs, prob = T)
lines(density(probs))
lines(density(probs), col = R)
lines(density(probs), col = "Red")
rocplot(probs, data_train$AHD)
cutoff_acc(probs, data_train$AHD)
cutoff_roc(probs, data_train$AHD)
source("Scripts/glm_functions.R")
rocplot(probs, data_train$AHD)
hist(preds, prob = T, main="Predicted Probability Hist")
#
cutoff_acc(probs, data_train$AHD)
rocplot(probs, data_train$AHD)
cutoff_acc(probs, data_train$AHD)[2,1]
unname(cutoff_acc(probs, data_train$AHD)[2,1])
# conf matrix test
db <- unname(cutoff_acc(probs, data_train$AHD)[2,1])
p_tr_probs = predict(lgm_model, data_train, type = "response")
head(p_tr_probs)
head(data_train)
cfi_tr <- confmatrix(p_tr_probs, data_train$AHD, db)
cfi_tr$mtrx
cfi_tr$info
source("Scripts/glm_functions.R")
# conf matrix test
db <- unname(cutoff_acc(probs, data_train$AHD)[2,1])
p_tr_probs = predict(lgm_model, data_train, type = "response")
head(p_tr_probs)
head(data_train)
cfi_tr <- confmatrix(p_tr_probs, data_train$AHD, db)
cfi_tr$mtrx
cfi_tr$info
p_te_probs = predict(lgm_model, data_test, type = "response")
head(p_te_probs)
head(data_train)
cfi_te <- confmatrix(p_te_probs, data_test$AHD, db)
cfi_te$mtrx
cfi_te$info
data_raw %>%
select(-one_of(c("X"))) %>%
select_if(is.numeric)  %>%
head
data_raw %>%
select(-one_of(c("X"))) %>%
select_if(is.numeric)  %>%
head
# odds ratio
cbind(exp(confint(lgm_model)), Ods_Ratio = exp(coef(lgm_model)), Coef = coef(lgm_model))
lgm_model %>%
exp
sapply(lgm_model exp)
sapply(lgm_model, exp)
sapply(list(lgm_model), exp)
sapply(list(lgm_model), coef)
sapply(list(lgm_model), funs(coef, confint))
sapply(list(lgm_model), funs("coef", "confint"))
sapply(list(lgm_model), funs(c("coef", "confint")))
sapply(lgm_model, funs(c("coef", "confint")))
sapply(lgm_model, confint)
sapply(list(lgm_model), confint)
sapply(list(lgm_model), confint)
sapply(list(lgm_model, lgm_model), confint)
f_9 <- AHD ~ . -X
lgm_model = glm(f_0, data = data_train, family = binomial)
summary(lgm_model)
# odds ratio
cbind(exp(confint(lgm_model)), Ods_Ratio = exp(coef(lgm_model)), Coef = coef(lgm_model))
sapply(list(lgm_model, lgm_model), confint)
# odds ratio
cbind(exp(confint(lgm_model)), Ods_Ratio = exp(coef(lgm_model)), Coef = coef(lgm_model))
# odds of variables in the model
cbind(exp(confint(lgm_model)),
Ods_Ratio = exp(coef(lgm_model)),
Coef = coef(lgm_model))
# odds of variables in the model
cbind(exp(confint(lgm_model)),
Ods_Ratio = exp(coef(lgm_model)),
Coefficients = coef(lgm_model))
# odds of variables in the model
cbind(exp(confint(lgm_model)),
'Ods Ratio' = exp(coef(lgm_model)),
Coefficients = coef(lgm_model))
# odds of variables in the model
cbind(exp(confint(lgm_model)),
'Odds Ratio' = exp(coef(lgm_model)),
Coefficients = coef(lgm_model))
# odds of variables in the model
cbind(exp(confint(lgm_model)),
Coefficients = coef(lgm_model),
'Odds Ratio' = exp(coef(lgm_model)))
# odds of variables in the model
sapply(cbind(exp(confint(lgm_model)),
Coefficients = coef(lgm_model),
'Odds Ratio' = exp(coef(lgm_model))), round, 2)
# odds of variables in the model
lapply(cbind(exp(confint(lgm_model)),
Coefficients = coef(lgm_model),
'Odds Ratio' = exp(coef(lgm_model))), round, 2)
# odds of variables in the model
mapply(cbind(exp(confint(lgm_model)),
Coefficients = coef(lgm_model),
'Odds Ratio' = exp(coef(lgm_model))), round, 2)
# odds of variables in the model
ort <- cbind(exp(confint(lgm_model)),
Coefficients = coef(lgm_model),
'Odds Ratio' = exp(coef(lgm_model)))
round(ort, 2)
# chances
data.frame('assuming all have disease' = t[1,2] / sum(t),
'assuming none hav disease' = t[1,1] / sum(t))
```{r odds ratio, include=c(-1)}
library(MASS)
library(dplyr)
library(popbio)
library(aod)
library(caret)
library(leaps)
library(bestglm)
library(boot)
# importing dataset
data_raw = read.csv("./Dataset/Heart.csv")
# assigning 0 and 1 to predictor
data_raw$AHD = ifelse(data_raw$AHD == "Yes", 1, 0)
# variables needs to be converted to factor <- Sex, Fbs, RestECG, ExAng, Ca, Slope
data_raw$Sex = as.factor(data_raw$Sex)
data_raw$Fbs = as.factor(data_raw$Fbs)
data_raw$RestECG = as.factor(data_raw$RestECG)
data_raw$ExAng = as.factor(data_raw$ExAng)
data_raw$Ca = as.factor(data_raw$Ca)
data_raw$Slope = as.factor(data_raw$Slope)
# Thal has 2 missing values: replacing with most frequent level: normal
data_raw$Thal[is.na(data_raw$Thal)] = levels(data_raw$Thal)[2]
# Ca has 4 missing values: replacing with most frequent level: 0
data_raw$Ca[is.na(data_raw$Ca)] = levels(data_raw$Ca)[1]
# normalization
data_raw %>%
select(-one_of(c("X"))) %>%
select_if(is.numeric)  %>%
head
# normalization
data_raw %>%
select(-one_of(c("X"))) %>%
select_if(is.numeric)  %>%
head
# continuous variables
cont_list = list(
Age = data_raw$Age,
RestBP = data_raw$RestBP,
Chol = data_raw$Chol,
MaxHR = data_raw$MaxHR,
Oldpeak = data_raw$Oldpeak
)
data_raw[, names(cont_list)] <- data.frame(sapply(cont_list, scale))
data_raw$RestBP = outlier_handler(data_raw$RestBP)
data_raw$Chol = outlier_handler(data_raw$Chol)
# required pckgs and fnctns ====
# local sources
source("Scripts/utility_functions.R")
source("Scripts/model_functions.R")
data_raw$RestBP = outlier_handler(data_raw$RestBP)
data_raw$Chol = outlier_handler(data_raw$Chol)
data_raw$Oldpeak = outlier_handler(data_raw$Oldpeak)
# train and test datasets
data_train = data_raw[ 1:250, ]
data_test = data_raw[251:303, ]
# variable analysis ====
#some ratios
#overall healthy rate
sum(data_train$AHD[data_train$AHD == 1]) / length(data_train$AHD)
# correlation of cont variables
cor(data.frame(cont_list))
cor(data_raw$AHD, data.frame(cont_list))
# Models ====
# logistic regression model
f_0 <- AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak
lgm_model = glm(f_0, data = data_train, family = binomial)
summary(lgm_model)
f_2 <- AHD ~ Chol + MaxHR + Oldpeak
lgm_model = glm(f_3, data = data_train, family = binomial)
f_3 <- AHD ~ Chol + MaxHR + Oldpeak
lgm_model = glm(f_3, data = data_train, family = binomial)
summary(lgm_model)
# Anova
anova(lgm_model)
# stepAIC
steps <- stepAIC(lgm_model, trace = T)
steps
steps <- step(lgm_model)
summary(steps)
# leaps
regsubs <- regsubsets(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
nbest = 1,
method = "exhaustive")
regsubs
summary(regsubs)
# bestglm
plot_list$AHD <- data_train$AHD
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 2:4)
# goodness-of-fit test
with(lgm_model,
pchisq(null.deviance - deviance,
df.null - df.residual,
lower.tail = F))
# evaluation of model according to cutoff value ====
probs <- predict(lgm_model, data_train, type = "response")
rocplot(probs, data_train$AHD)
cutoff_acc(probs, data_train$AHD)
cutoff_roc(probs, data_train$AHD)
# conf matrix test
db <- unname(cutoff_acc(probs, data_train$AHD)[2,1])
p_tr_probs = predict(lgm_model, data_train, type = "response")
head(p_tr_probs)
head(data_train)
cfi_tr <- confmatrix(p_tr_probs, data_train$AHD, db)
cfi_tr$mtrx
cfi_tr$info
p_te_probs = predict(lgm_model, data_test, type = "response")
head(p_te_probs)
head(data_train)
cfi_te <- confmatrix(p_te_probs, data_test$AHD, db)
cfi_te$mtrx
cfi_te$info
# plots about the data ====
# cont type variables in train dataset
plot_list = list(
Age = data_train$Age,
RestBP = data_train$RestBP,
Chol = data_train$Chol,
MaxHR = data_train$MaxHR,
Oldpeak = data_train$Oldpeak
)
# plotting individually
par(mfrow = c(2,3))
sapply(plot_list, plot, y=data_train$AHD)
# plotting individually
par(mfrow = c(2,3))
sapply(plot_list, plot, y=data_train$AHD)
par(mfrow = c(1,1))
#another graph
logi.hist.plot(probs, data_train$AHD, boxp = F, type = "count", col = "gray", xlabel = "Age")
# all cont type variables
pairs(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
diag.panel = panel.hist,
lower.panel = panel.cor)
#kfold
trcontrol <- trainControl(method = "cv", number = 10)
trcontrol
train(f.all, data_train, method = 'glm', family = binomial, trcontrol = trcontrol)
train(f_0, data_train, method = 'glm', family = binomial, trcontrol = trcontrol)
cv_model <- cv.glm(data_train, lgm_model)
cv_model$delta
cv_model <- cv.glm(data_train, lgm_model, K = 10)
cv_model$delta
flds <- createFolds(data_train, k = 10, list = TRUE, returnTrain = FALSE)
flds
