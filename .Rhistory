# area under the curve value
area_under_curve <-performance(probs, "auc")
area_under_curve@y.values[[1]]
# plots about the data ====
par(mfrow = c(2,3))
plot_list = list(
Age = data_train$Age,
RestBP = data_train$RestBP,
Chol = data_train$Chol,
MaxHR = data_train$MaxHR,
Oldpeak = data_train$Oldpeak
)
sapply(plot_list, plot, y=data_train$AHD)
pairs(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
diag.panel = panel.hist,
lower.panel = panel.cor)
source("Scripts/utility_functions.R")
pairs(AHD ~ Age + RestBP + Chol + MaxHR + Oldpeak,
data = data_train,
diag.panel = panel.hist,
lower.panel = panel.cor)
# adding model de
xv <- seq(min(plot_list[1]), max(plot_list[1]), 0.01)
typeof(plot_list[1])
# adding model de
plot_data <- data.frame(plot_list[1])
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
plot(xv,yv)
# adding model de
plot_data <- data.frame(plot_list[1])
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
head(plot_data)
xv <- seq(min(plot_data), max(plot_data), 0.01)
xv
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
plot(plot_data, data_train$AHD)
# adding model de
plot_data <- data.frame(plot_list[1])
head(plot_data)
plot(plot_data, data_train$AHD)
# adding model de
plot_data <- vector(plot_list[1])
# adding model de
plot_data <- vector(plot_list[1])
typeof(data_train$AHD)
plot_list[1]
# adding model de
plot_data <- plot_list[1]$Age
head(plot_data)
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
plot(plot_data, data_train$AHD)
lines(xv, yv)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
plot_data=xv
# adding model de
plot_data <- plot_list[1]$Age
head(plot_data)
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, plot_data, type = "response")
yv <- predict(lgm_model, data_train, type = "response")
plot(plot_data, data_train$AHD)
lines(xv, yv)
# adding model de
plot_data <- plot_list[1]$Age
head(plot_data)
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, data_train, type = "response")
plot(plot_data, data_train$AHD)
lines(xv, yv)
length(xv)
length(yv)
lines(plot_data ~ data_train$AHD)
lines(plot_data ~ yv)
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, data_train, type = "response")
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
head(data_raw)
# assigning 0 and 1 to predictor
data_raw$AHD = ifelse(data_raw$AHD == 'Tes', 1, 0)
head(data_raw)
# importing dataset
data_raw = read.csv("./Dataset/Heart.csv")
head(data_raw)
levels(data_raw$AHD)
# assigning 0 and 1 to predictor
data_raw$AHD = ifelse(data_raw$AHD ==  "Yes", 1, 0)
data_raw$AHD
head(data_raw)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
head(plot_data)
list(plot_data=xv)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
install.packages("popbio")
library(popbio)
#another graph
logi.hist.plot(plot_data, data_train$AHD, boxp = F, type = "count", col = "gray", xlabel = "Age")
# adding model line to plot TODO: needs debug
plot_data <- plot_list[1]$Age
head(plot_data)
#another graph
logi.hist.plot(plot_data, data_train$AHD, boxp = F, type = "count", col = "gray", xlabel = "Age")
length(plot_data)
length(data_train)
data_train = data_raw[ind == 1, ]
length(data_train)
# creating dataset for train and test
ind = sample(x = 2, size = nrow(data_raw), replace = T, prob = c(0.9, 0.1))
data_train = data_raw[ind == 1, ]
data_train = data_raw[ind == 1, ]
length(data_train)
# importing dataset
data_raw = read.csv("./Dataset/Heart.csv")
head(data_raw)
# Data Examining ====
# examining variables
str(data_raw)
# assigning 0 and 1 to predictor
data_raw$AHD = ifelse(data_raw$AHD ==  "Yes", 1, 0)
# variables needs to be converted to factor <- Sex, Fbs, RestECG, ExAng, Ca, Slope
data_raw$Sex = as.factor(data_raw$Sex)
data_raw$Fbs = as.factor(data_raw$Fbs)
data_raw$RestECG = as.factor(data_raw$RestECG)
data_raw$ExAng = as.factor(data_raw$ExAng)
data_raw$Ca = as.factor(data_raw$Ca)
data_raw$Slope = as.factor(data_raw$Slope)
# examining factor levels
sapply(list(data_raw$Sex,
data_raw$Fbs,
data_raw$RestECG,
data_raw$Ca,
data_raw$Slope,
data_raw$ChestPain,
data_raw$Thal), levels)
# examining NA values
summarise_if(data_raw, is.atomic, funs(sum(is.na(.))))
filter((data_raw), is.na(Ca) | is.na(Thal))
# Thal has 2 missing values: replacing with most frequent level: normal
data_raw$Thal[is.na(data_raw$Thal)] = levels(data_raw$Thal)[2]
# Ca has 4 missing values: replacing with most frequent level: 0
data_raw$Ca[is.na(data_raw$Ca)] = levels(data_raw$Ca)[1]
# normalization
data_raw %>%
select(-one_of(c("X"))) %>%
select_if(is.numeric)  %>%
head
# continuous variables
cont_list = list(
Age = data_raw$Age,
RestBP = data_raw$RestBP,
Chol = data_raw$Chol,
MaxHR = data_raw$MaxHR,
Oldpeak = data_raw$Oldpeak
)
# examining and changing variables
head(sapply(cont_list, scale))
data_raw[, names(cont_list)] <- data.frame(sapply(cont_list, scale))
head(data_raw)
# for reproducable results, seed. TODO: we need to change this to kfold
set.seed(1000)
# creating dataset for train and test
ind = sample(x = 2, size = nrow(data_raw), replace = T, prob = c(0.9, 0.1))
data_train = data_raw[ind == 1, ]
data_test = data_raw[ind == 2, ]
length(data_train)
ncol(data_train)
nrow(data_train)
# adding model line to plot TODO: needs debug
plot_data <- plot_list[1]$Age
# plots about the data ====
# cont type variables in train dataset
plot_list = list(
Age = data_train$Age,
RestBP = data_train$RestBP,
Chol = data_train$Chol,
MaxHR = data_train$MaxHR,
Oldpeak = data_train$Oldpeak
)
# adding model line to plot TODO: needs debug
plot_data <- plot_list[1]$Age
#another graph
logi.hist.plot(plot_data, data_train$AHD, boxp = F, type = "count", col = "gray", xlabel = "Age")
# examining and changing variables
cor(cont_list)
# examining and changing variables
cor(cont_list$Age,cont_list$RestBP)
# examining and changing variables
cor(cont_list[1])
# examining and changing variables
cor(cont_list[.])
# examining and changing variables
cor(data.frame(cont_list))
# examining and changing variables
cor(data_raw$AHD, data.frame(cont_list))
# variable analysis ====
cor(data_raw$AHD, data.frame(cont_list))
# variable analysis ====
cor(data.frame(cont_list))
cor(data_raw$AHD, data.frame(cont_list))
#odds ratio
coef(lgm_model)
# Models ====
# logistic regression model
lgm_model = glm(AHD ~ ., data = data_train, family = binomial)
summary(lgm_model)
#odds ratio
coef(lgm_model)
exp(coef(lgm_model))
confint(lgm_model)
exp(confint(lgm_model))
chisq.test(lgm_model)
install.packages("aod")
library(aod)
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model))
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 3:5)
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 3:7)
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = .)
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 1:7)
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 1:13)
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 1:15)
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 1:17)
install.packages("caret")
library(caret)
# examining NA values
summarise_if(data_raw, is.atomic, funs(sum(. == "")))
library(dplyr)
# examining NA values
summarise_if(data_raw, is.atomic, funs(sum(. == "")))
# examining NA values
summarise_if(data_raw, is.atomic, funs(sum(is.na(.))))
# examining factor levels
sapply(data_raw, function(x) {unique(x)})
# examining factor levels
sapply(data_raw, function(x) {sum(unique(x))})
# examining factor levels
sapply(data_raw, function(x) {length(unique(x))})
# variable analysis ====
#some ratios
data_raw$AHD[data_raw$AHD == 1] / data_raw$AHD
head(data_raw)
length(data_raw$AHD)
data_raw$AHD[data_raw$AHD == 1]
# variable analysis ====
#some ratios
sum(data_raw$AHD[data_raw$AHD == 1]) / length(data_raw$AHD)
# creating dataset for train and test
ind = sample(x = 2, size = nrow(data_raw), replace = T, prob = c(0.9, 0.1))
# Models ====
# logistic regression model
lgm_model = glm(AHD ~ ., data = data_train, family = binomial)
summary(lgm_model)
logi.hist.plot(plot_data, data_train$AHD, boxp = F, type = "count", col = "gray", xlabel = "Age")
# adding model line to plot TODO: needs debug
plot_data <- plot_list[1]$Age
head(plot_data)
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
# adding model line to plot TODO: needs debug
plot_data <- plot_list[1]$Age
head(plot_data)
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
yv <- predict(lgm_model$fitted.values, list(plot_data=xv), type = "response")
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
#another graph
logi.hist.plot(plot_data, data_train$AHD, boxp = F, type = "count", col = "gray", xlabel = "Age")
# Models ====
# logistic regression model
lgm_model = glm(AHD ~ ., data = data_train, family = binomial)
summary(lgm_model)
# odds ratio
coef(lgm_model)
exp(coef(lgm_model))
exp(confint(lgm_model))
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 1:17)
library(ROCR)
library(dplyr)
library(popbio)
library(aod)
library(caret)
source("Scripts/utility_functions.R")
# Models ====
# logistic regression model
lgm_model = glm(AHD ~ ., data = data_train, family = binomial)
summary(lgm_model)
# odds ratio
coef(lgm_model)
exp(coef(lgm_model))
exp(confint(lgm_model))
# wald test
wald.test(b = coef(lgm_model), Sigma = vcov(lgm_model), Terms = 1:17)
# goodness-of-fit test
with(lgm_model, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = F))
# train results ====
# the case of assuming all are healthy
tab <- table(data_train$AHD)
tab
unname(round(tab[2] / sum(tab), 4))
# prediction
p_tr_probs = predict(lgm_model, data_train, type = "response")
head(p_tr_probs)
head(data_train)
# misclassification error and confusion matrix
p_tr_preds <- ifelse(p_tr_probs > 0.5, 1, 0)
tab_tr_cm <- table(predicted = p_tr_preds, actual = data_train$AHD)
tab_tr_cm
mse <- 1 - sum(diag(tab_tr_cm))/sum(tab_tr_cm)
mse
tpr <- tab_tr_cm[1,2] / tab_tr_cm[2,2]
tpr
fpr <- tab_tr_cm[1,2] / tab_tr_cm[1,1]
fpr
# test results ====
# the case of assuming all are healthy
tab <- table(data_test$AHD)
tab
unname(round(tab[2] / sum(tab), 4))
# prediction
p_te_probs = predict(lgm_model, data_test, type = "response")
head(p_te_probs)
head(data_train)
# misclassification error and confusion matrix
p_te_preds <- ifelse(p_te_probs > 0.5, 1, 0)
tab_te_cm <- table(predicted = p_te_preds, actual = data_test$AHD)
tab_te_cm
mse <- 1 - sum(diag(tab_te_cm))/sum(tab_te_cm)
mse
tpr <- tab_te_cm[1,2] / tab_te_cm[2,2]
tpr
fpr <- tab_te_cm[1,2] / tab_te_cm[1,1]
fpr
# evaluation of model according to cutoff value ====
# probabilities frequency distribution
probs <- predict(lgm_model, data_train, type = "response")
head(probs)
hist(probs)
# accuracy acc to cutoff value
probs <- prediction(probs, data_train$AHD)
evals <- performance(probs, "acc")
plot(evals)
# true positive and false positive graph
true_positive_rate <- performance(probs, "tpr", "fpr")
plot(true_positive_rate, col=rainbow(7), main="ROC curve Admissions", xlab="Specificity",
ylab="Sensitivity")
abline(0, 1)
# area under the curve value
area_under_curve <-performance(probs, "auc")
area_under_curve@y.values[[1]]
# plots about the data ====
# cont type variables in train dataset
plot_list = list(
Age = data_train$Age,
RestBP = data_train$RestBP,
Chol = data_train$Chol,
MaxHR = data_train$MaxHR,
Oldpeak = data_train$Oldpeak
)
# plotting individually
par(mfrow = c(2,3))
sapply(plot_list, plot, y=data_train$AHD)
# adding model line to plot TODO: needs debug
plot_data <- plot_list[1]$Age
head(plot_data)
xv <- seq(min(plot_data), max(plot_data), 0.01)
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
View(lgm_model)
head(plot_data)
plot_list[1]$Age
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
xv <- data.frame(seq(min(plot_data), max(plot_data), 0.01))
yv <- predict(lgm_model, list(plot_data=xv), type = "response")
xv <- data.frame(Age = seq(min(plot_data), max(plot_data), 0.01))
View(xv)
yv <- predict(lgm_model, newdata = xv, type = "response")
xv <- data.frame(Age = seq(min(plot_data), max(plot_data), len = 100))
yv <- predict(lgm_model, newdata = xv, type = "response")
fit = glm(vs ~ hp, data=mtcars, family=binomial)
newdat <- data.frame(hp=seq(min(mtcars$hp), max(mtcars$hp),len=100))
newdat$vs = predict(fit, newdata=newdat, type="response")
plot(vs~hp, data=mtcars, col="red4")
lines(vs ~ hp, newdat, col="green4", lwd=2)
fit = glm(vs ~ hp, data=mtcars, family=binomial)
newdat <- data.frame(hp=seq(min(mtcars$hp), max(mtcars$hp),len=100))
newdat$vs = predict(fit, newdata=newdat, type="response")
plot(vs~hp, data=mtcars, col="red4")
lines(vs ~ hp, newdat, col="green4", lwd=2)
yv <- predict(lgm_model, Age = xv, type = "response")
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
View(xv)
yv <- predict(lgm_model, xv, type = "response")
xv <- data.frame(Age = seq(min(plot_data), max(plot_data), len = 100))
yv <- predict(lgm_model, data_train = xv, type = "response")
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
# adding model line to plot TODO: needs debug
plot_data <- plot_list[1]$Age
head(plot_data)
xv <- data.frame(Age = seq(min(plot_data), max(plot_data), len = 100))
yv <- predict(lgm_model, data_train = xv, type = "response")
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
xv <- data.frame(Age = seq(min(plot_data), max(plot_data), by = 0.01))
yv <- predict(lgm_model, data_train = xv, type = "response")
plot(plot_data, data_train$AHD)
lines(plot_data ~ yv)
plot(data_train$AHD, plot_data)
plot(plot_data, data_train$AHD)
curve(predict(lgm_model, data.frame(Age=x), type = "response"))
curve(predict(lgm_model, data.frame(Age=x), type = "response"), add = T)
data.frame(Age=x)
data.frame(Age=x)
data_frame(data_train = x)
library(MASS)
#stepAIC
stepAIC(lgm_model)
#stepAIC
stepAIC(lgm_model, trace = F)
data_train
lgm_model = glm(AHD ~ . - X, data = data_train, family = binomial)
summary(lgm_model)
#stepAIC
stepAIC(lgm_model)
#stepAIC
stepAIC(lgm_model, trace = F)
lgm_model = glm(AHD ~ . Age + RestBP + MaxHR + Oldpeak, data = data_train, family = binomial)
lgm_model = glm(AHD ~ Age + RestBP + MaxHR + Oldpeak, data = data_train, family = binomial)
summary(lgm_model)
#stepAIC
stepAIC(lgm_model, trace = F)
# Anova
anova(lgm_model)
# stepAIC
stepAIC(lgm_model, trace = F)
# Anova
anova(lgm_model)
lgm_model = glm(AHD ~ ., data = data_train, family = binomial)
summary(lgm_model)
# Anova
anova(lgm_model)
# stepAIC
stepAIC(lgm_model, trace = F)
install.packages(leaps)
install.packages("leaps")
library(leaps)
# leaps
regsubsets(AHD ~ Age + RestBP + MaxHR + Oldpeak,
data = data_train,
nbest = 1
method = "exhaustive")
# leaps
regsubsets(AHD ~ Age + RestBP + MaxHR + Oldpeak,
data = data_train,
nbest = 1,
method = "exhaustive")
# leaps
regsubsets(AHD ~ .,
data = data_train,
nbest = 1,
method = "exhaustive")
# leaps
regsubs <- regsubsets(AHD ~ .,
data = data_train,
nbest = 1,
method = "exhaustive")
summary(regsubs)
install.packages("bestglm")
library(bestglm)
is.numeric(data_train)
cont_list
cont_list$asda <- c(2,23,3)
cont_list
# bestglm
cont_list$AHD <- data_train$AHD
data.frame(cont_list)
# plots about the data ====
# cont type variables in train dataset
plot_list = list(
Age = data_train$Age,
RestBP = data_train$RestBP,
Chol = data_train$Chol,
MaxHR = data_train$MaxHR,
Oldpeak = data_train$Oldpeak
)
# bestglm
plot_list$AHD <- data_train$AHD
data.frame(plot_list)
best_glm <- bestglm(data.frame(plot_list),
family = binomial,
IC = "BIC")
summary(best_glm$BestModel)
summary(best_glm$ModelReport)
summary(best_glm$Subsets)
